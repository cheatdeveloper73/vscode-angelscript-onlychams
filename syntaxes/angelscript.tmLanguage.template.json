{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "AngelScript",
    "scopeName": "source.angelscript",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#keywords" },
        { "include": "#storage_modifiers" },
        { "include": "#constants" },
        { "include": "#support_types" },
        { "include": "#api_types" },
        { "include": "#api_functions" },
        { "include": "#function_names" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#identifier" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.angelscript",
                    "match": "//.*"
                },
                {
                     "name": "comment.line.hash.angelscript",
                     "match": "#.*"
                },
                {
                    "name": "comment.block.angelscript",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [ { "include": "#comments" } ]
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.verbatim.double.angelscript",
                    "begin": "@\"",
                    "end": "\"",
                    "patterns": [ {"match": "\"\""} ]
                },
                {
                    "name": "string.quoted.verbatim.single.angelscript",
                    "begin": "@'",
                    "end": "'",
                    "patterns": [ {"match": "''"} ]
                },
                {
                    "name": "string.quoted.double.angelscript",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [ { "include": "#string_escapes" } ]
                },
                {
                    "name": "string.quoted.single.angelscript",
                    "begin": "'",
                    "end": "'",
                    "patterns": [ { "include": "#string_escapes" } ]
                },
                {
                    "name": "string.quoted.heredoc.angelscript",
                    "begin": "``",
                    "end": "``"
                }
            ]
        },
         "string_escapes": {
             "patterns": [
                {
                    "name": "constant.character.escape.angelscript",
                    "match": "\\\\(n|r|t|\\\\|'|\"|\\?|0|a|b|f|v|[xX][0-9a-fA-F]{1,2}|[uU][0-9a-fA-F]{4})"
                },
                {
                     "name": "invalid.illegal.escape.angelscript",
                     "match": "\\\\."
                }
            ]
        },
        "constants": {
             "patterns": [
                {
                    "name": "constant.language.angelscript",
                    "match": "\\b(true|false|null)\\b"
                },
                {
                    "name": "constant.numeric.angelscript",
                    "match": "\\b(0[xX][0-9a-fA-F]+|\\d*\\.?\\d+([eE][+-]?\\d+)?f?)\\b"
                 }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.angelscript",
                    "match": "\\b(if|else|for|while|do|break|continue|return|switch|case|default|try|catch|throw|foreach)\\b"
                },
                {
                    "name": "keyword.other.angelscript",
                    "match": "\\b(namespace|class|enum|interface|funcdef|typedef|import|from|external|mixin|shared)\\b"
                },
                {
                    "name": "keyword.operator.angelscript",
                    "match": "\\b(is|isnot|in|out|inout)\\b"
                },
                {
                     "name": "keyword.type.angelscript",
                     "match": "\\b(void|bool|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|float|double)\\b"
                }
            ]
        },
         "storage_modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.angelscript",
                    "match": "\\b(const|private|protected|public|final|override|set|get|property|cast|implicit|explicit|auto)\\b"
                },
                {
                    "name": "storage.type.angelscript",
                     "match": "\\b(this|super)\\b"
                }
            ]
        },
        "support_types": {
            "patterns": [
                {
                    "name": "support.type.angelscript",
                    "match": "\\b(string|array)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.angelscript",
                    "match": "==|!=|<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.assignment.compound.angelscript",
                    "match": "\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>="
                },
                {
                    "name": "keyword.operator.assignment.angelscript",
                    "match": "="
                },
                {
                     "name": "keyword.operator.increment-decrement.angelscript",
                     "match": "\\+\\+|--"
                },
                {
                    "name": "keyword.operator.arithmetic.angelscript",
                    "match": "\\+|\\-|\\*|\\/|%"
                },
                {
                    "name": "keyword.operator.logical.angelscript",
                    "match": "&&|\\|\\||!"
                },
                 {
                     "name": "keyword.operator.bitwise.angelscript",
                     "match": "<<|>>|&|\\||\\^|~"
                 },
                 {
                      "name": "keyword.operator.scope.angelscript",
                      "match": "::"
                 },
                 {
                      "name": "keyword.operator.other.angelscript",
                      "match": "\\?|@"
                 }
            ]
        },
        "punctuation": {
             "patterns": [
                { "name": "punctuation.terminator.angelscript", "match": ";" },
                { "name": "punctuation.separator.angelscript", "match": "," },
                { "name": "punctuation.accessor.angelscript", "match": "\\." },
                { "name": "meta.brace.square.angelscript", "match": "\\[|\\]" },
                { "name": "meta.brace.round.angelscript", "match": "\\(|\\)" },
                { "name": "meta.brace.curly.angelscript", "match": "\\{|\\}" }
             ]
        },

        "api_types": {
            "patterns": [
                {
                    "name": "entity.name.type.api.angelscript",
                    "match": "\\b(__API_TYPES__)(@|&)?\\b"
                }
            ]
        },
        "api_functions": {
            "patterns": [
                {
                    "name": "entity.name.function.api.angelscript",
                    "match": "\\b(__API_FUNCTIONS__)\\b(?=\\s*\\()"
                }
            ]
        },
         "function_names": {
             "patterns": [
                {
                    "name": "entity.name.function.angelscript",
                     "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\()"
                }
            ]
        },
        "identifier": {
            "patterns": [
                {
                    "name": "variable.other.angelscript",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}